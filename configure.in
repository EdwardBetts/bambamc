AC_INIT(bambamc,0.0.30,[gt1@sanger.ac.uk],[bambamc],[http://www.sanger.ac.uk])
AC_CANONICAL_SYSTEM
AC_PROG_LIBTOOL

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE
AC_CONFIG_MACRO_DIR([m4])

# check for c compiler
CFLAGS_SAVE="${CFLAGS}"
CFLAGS=""
AC_PROG_CC
CFLAGS="${CFLAGS_SAVE}"

AM_PROG_CC_C_O

AC_LANG_ASSERT([C])

AC_HEADER_STDC

PKG_PROG_PKG_CONFIG
PKG_CHECK_MODULES([zlib],[zlib >= 0],[zlibpkg=yes],[zlibpkg=no])

if [[ "${zlibpkg}" = "yes" ]] ; then
	PKG_CHECK_MODULES([zlib],[zlib >= 0])

	LIBSSAVE="${LIBS}"
	LIBS="${LIBS} ${zlib_LIBS}"
	CPPFLAGSSAVE="${CPPFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${zlib_CFLAGS}"
        AC_MSG_CHECKING([whether we can compile a zlib program])
        AC_TRY_LINK([#include <zlib.h>
#include <string.h>
],[
	z_stream strm;
	memset ( &strm , 0, sizeof(z_stream) );
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	deflateInit(&strm,Z_DEFAULT_COMPRESSION);
	],[zlib=yes],[zlib=no])
        AC_MSG_RESULT([${zlib}])
	LIBS="${LIBSSAVE}"
	CPPFLAGS="${CPPFLAGSSAVE}"

	if [[ "$zlib" = "no" ]] ; then
		AC_MSG_ERROR([Required library zlib not found.]);
	else
		ZLIBREQ=zlib
		ZLIBCPPFLAGS="${zlib_CFLAGS}"
		ZLIBLIBS="${zlib_LIBS}"
	fi
else
	AC_MSG_WARN([zlib pkgconfig file is not installed. Trying if -lz for LIBS is enough.])

	LIBSSAVE="${LIBS}"
	LIBS="${LIBS} -lz"
        AC_MSG_CHECKING([whether we can compile a zlib program])
        AC_TRY_LINK([#include <zlib.h>
#include <string.h>
],[
	z_stream strm;
	memset ( &strm , 0, sizeof(z_stream) );
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	deflateInit(&strm,Z_DEFAULT_COMPRESSION);
	],[zlib=yes],[zlib=no])
        AC_MSG_RESULT([${zlib}])
	LIBS="${LIBSSAVE}"

	if [[ "$zlib" = "no" ]] ; then
		AC_MSG_ERROR([Required library zlib not found.]);
	else
		ZLIBREQ=
		ZLIBCPPFLAGS=
		ZLIBLIBS="-lz"
	fi
fi


#PKG_CHECK_MODULES([suds],[suds >= 0])
#CPPFLAGS="${CPPFLAGS} ${suds_CFLAGS}"
#LIBS="${LIBS} ${suds_LIBS}"

if test "${CC}" = "gcc" ; then
	CPPFLAGS="${CPPFLAGS} -W -Wall"
fi
if test "${CC}" = "cl.exe" ; then
	CPPFLAGS="${CPPFLAGS} -W1" # -Wall
fi

AC_ARG_ENABLE(optimization,
       AS_HELP_STRING([--enable-optimization],[use compiler optimization (default yes)]),
        [optimization=${enableval}],[optimization=yes])
AC_ARG_ENABLE(debug,
        AS_HELP_STRING([--enable-debug],[use compiler debug flags (default no)]),
        [debug=${enableval}],[debug=no])
AC_ARG_ENABLE(profile,
        AS_HELP_STRING([--enable-profile],[use compiler profiling flags (default no)]),
        [profile=${enableval}],[profile=no])
AC_ARG_ENABLE(fast,
        AS_HELP_STRING([--enable-fast],[disable evaluation of assertions (default no)]),
        [fast=${enableval}],[fast=no])
AC_ARG_ENABLE(bamonly,
       AS_HELP_STRING([--enable-bamonly],[support bam only, no sam (default no)]),
        [bamonly=${enableval}],[bamonly=no])

if test "${fast}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -DNDEBUG"
fi

BAMONLYDEFINE=
if test "${bamonly}" = "yes" ; then
	BAMONLYDEFINE="#define BAMBAMC_BAMONLY"
fi

if test "${debug}" = "yes" ; then
        CFLAGS="${CFLAGS} -g -O0 -rdynamic"
else
	if test "${profile}" = "yes" ; then
	        CFLAGS="${CFLAGS} -g -pg -rdynamic"
	else
		if test "${optimization}" = "yes" ; then
			case ${CC} in
				gcc)
					CFLAGS="${CFLAGS} -O3 -rdynamic"
					;;
				*-mingw32msvc-gcc)
					CFLAGS="${CFLAGS} -O3 -rdynamic"
					;;
				cl.exe)
					CFLAGS="${CFLAGS} -O2 -Ob2 -Ot -Oy"
					;;
			esac
		fi

	fi
fi

SAMTOOLSCPPFLAGS=
SAMTOOLSLDFLAGS=
SAMTOOLSLIBS=
AC_ARG_WITH([samtools],
            [AS_HELP_STRING([--with-samtools@<:@=PATH@:>@], [path to samtools directory with compiled library @<:@default=@:>@])],
            [with_samtools=${withval}],
            [with_samtools=])

if [[ "${with_samtools}" != "no" ]] ; then
	LIBSSAVE="${LIBS}"
	LDFLAGSSAVE="${LDFLAGS}"
	CPPFLAGSSAVE="${CPPFLAGS}"

	if [[ \( ! -z "${with_samtools}" \) -a \( "${with_samtools}" != "yes" \) ]] ; then
		SAMTOOLSCPPFLAGS="-I${with_samtools}/include -I${with_samtools}"
		SAMTOOLSLDFLAGS="-L${with_samtools}/lib -L${with_samtools}"
	fi

	SAMTOOLSLIBS="-lbam -lz"

	CPPFLAGSSAVE="${CPPFLAGS}"
	LDFLAGSSAVE="${LDFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${SAMTOOLSCPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${SAMTOOLSLDFLAGS}"

	AC_CHECK_HEADER(sam.h, [sam_h=yes], [sam_h=no])
	AC_CHECK_HEADER(samtools/sam.h, [samtools_sam_h=yes], [samtools_sam_h=no])

	CPPFLAGS="${CPPFLAGSSAVE}"
	LDFLAGS="${LDFLAGSSAVE}"

	if test "${sam_h}" = "yes" -o "${samtools_sam_h}" = "yes" ; then
		CPPFLAGSSAVE="${CPPFLAGS}"
		LDFLAGSSAVE="${LDFLAGS}"
		LIBSSAVE="${LIBS}"
		CPPFLAGS="${CPPFLAGS} ${SAMTOOLSCPPFLAGS}"
		LDFLAGS="${LDFLAGS} ${SAMTOOLSLDFLAGS}"
		LIBS="${LIBS} ${SAMTOOLSLIBS}"

		if test "${sam_h}" = "yes" ; then
			SAMHEADER="sam.h"
			SAMHEADERDEFINE="#define HAVE_SAM_H"
			CPPFLAGS="${CPPFLAGS} -DHAVE_SAM_H"
		fi
		if test "${samtools_sam_h}" = "yes" ; then
			SAMHEADER="samtools/sam.h"
			SAMHEADERDEFINE="#define HAVE_SAMTOOLS_SAM_H"
			CPPFLAGS="${CPPFLAGS} -DHAVE_SAMTOOLS_SAM_H"
		fi

		AC_MSG_CHECKING([whether we can compile a program using ${SAMHEADER}])
			AC_LINK_IFELSE([AC_LANG_SOURCE([
#if defined(HAVE_SAM_H)
#include <sam.h>
#endif
#if defined(HAVE_SAMTOOLS_SAM_H)
#include <samtools/sam.h>
#endif

				int main() {
					sam_open("reads.sam");
					return 0;
			}])],
			have_sam=yes,
			have_sam=no
		)

		AC_MSG_RESULT($have_sam)
		CPPFLAGS="${CPPFLAGSSAVE}"
		LDFLAGS="${LDFLAGSSAVE}"
		LIBS="${LIBSSAVE}"

		if test "${have_sam}" = "no" ; then
			AC_MSG_ERROR(["Compiling test program failed, aborting.])
		fi
	else
		AC_MSG_ERROR([Header sam.h not found. Please set --with-samtools accordingly])
	fi
else
	AC_MSG_ERROR([Compiled samtools/lib required. Please set --with-samtools accordingly])
fi

PACKAGE_NAME=${PACKAGE}
PACKAGE_VERSION=${VERSION}

AC_SUBST([PACKAGE_NAME])
AC_SUBST([PACKAGE_VERSION])
AC_SUBST([SAMTOOLSCPPFLAGS])
AC_SUBST([SAMTOOLSLDFLAGS])
AC_SUBST([SAMTOOLSLIBS])
AC_SUBST([ZLIBCPPFLAGS])
AC_SUBST([ZLIBLIBS])
AC_SUBST([ZLIBREQ])
AC_SUBST([SAMHEADERDEFINE])
AC_SUBST([BAMONLYDEFINE])
AC_OUTPUT(Makefile src/Makefile ubuntu.sh bambamc.pc src/bambamc/BamBam_Config.h)
